#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build 4019-BIN-19.07

on: 
  release:
    types: [published]
  push:
    branches: 
      - 4019-19.07
    paths:
      - '.config'
  # schedule:
    #  - cron: 0 16 * * 5
  # watch:
    # types: [started]

env:
  REPO_URL: https://github.com/project-openwrt/openwrt
  REPO_BRANCH: openwrt-19.07
  CONFIG_FILE: .config1907
  DIY_SH: diy.sh
  DOWNLOAD_URL_FILE: Tmp-Link-Url.txt
  TZ: Asia/Shanghai
  TARGET: ipq40xx
  SUBTARGET: generic
  DEVICE: openwrt-ipq40xx-asus_rt-acrh17
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_TMP_LINK: true


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler scons antlr3 gperf ecj fastjar mkisofs 
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
       cd openwrt
       ./scripts/feeds update -a
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
    - name: Upload Config
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: config.seed
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.seed
        
    - name: Upload Packages
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: packages
        path: openwrt/bin/packages
                
    - name: Upload SquashFS Factory Image
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-factory.trx
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-initramfs-factory.trx
        
    - name: Upload SquashFS Sysupgrade Image
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-sysupgrade.bin
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-sysupgrade.bin
                
    - name: Upload Files to Tmp.Link
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      run: |
        # Compress Packages
        cd openwrt/bin/packages
        zip -q -r ../targets/$TARGET/$SUBTARGET/packages.zip *
        # Compress Kernel-Packages
        cd ../targets/$TARGET/$SUBTARGET
        zip -q -r kernel-packages.zip packages
        
        # Upload Files to Tmp.Link
        find . -maxdepth 1 ! -name "$DOWNLOAD_URL_FILE" -type f -exec echo {} >> $DOWNLOAD_URL_FILE \; -exec curl -k -F "file=@{}" -F "token=${{ secrets.TMP_LINK_TOKEN }}" -F "model=0" -X POST "https://connect.tmp.link/api_v2/cli_uploader" -s >> $DOWNLOAD_URL_FILE \;
        # Remove No Need Contents
        sed -i 's/\.\///g' $DOWNLOAD_URL_FILE
        sed -i '/^Upload.*/d' $DOWNLOAD_URL_FILE
        sed -i '/^Thank.*/d' $DOWNLOAD_URL_FILE
        sed -i '/Download/G' $DOWNLOAD_URL_FILE
    - name: Upload Download Url File
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_TMP_LINK == 'true'
      with:
        name: ${{ env.DOWNLOAD_URL_FILE }}
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DOWNLOAD_URL_FILE }}
